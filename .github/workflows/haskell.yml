name: Haskell CI

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        cabal: ["3.4"]
        ghc: ["8.10.7"]
        os: [ubuntu-latest, macos-latest]

    steps:
    - name: Install Haskell
      uses: input-output-hk/actions/haskell@latest
      id: setup-haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ matrix.cabal }}

    - name: Install system dependencies
      uses: input-output-hk/actions/base@latest
      with:
        use-sodium-vrf: false # default is true

    - uses: actions/checkout@v3

    - name: Select build directory
      run: |
        echo "$HOME/.cabal/bin"                 >> $GITHUB_PATH

    - name: Install SystemD (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get -y install libsystemd0 libsystemd-dev

    - name: Install Postgres (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev libpq5 net-tools postgresql
    
    - name: Post Install Cleanup (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get -y remove --purge software-properties-common
        sudo apt-get -y autoremove

    - name: Install Postgres support (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install postgresql@14 libpq openssl@1.1 tree
        tree /usr/local/opt/postgresql@14/lib/
        echo "PKG_CONFIG_PATH=/usr/local/opt/postgresql@14/lib/postgresql@14/pkgconfig:/usr/local/opt/openssl/lib/pkgconfig:$PKG_CONFIG_PATH" | tee $GITHUB_ENV

    - name: Start Postgresql service (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew services start postgresql
        sudo mkdir -p /var/run/postgresql/
        sudo ln -s /tmp/.s.PGSQL.5432 /var/run/postgresql/.s.PGSQL.5432

    - name: Start Postgres service (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: sudo pg_ctlcluster 14 main start

    - name: Check if postgres is running
      run: |
        sleep 20
        netstat -an
        ls -al /var/run/postgresql/.s.PGSQL.5432 || true
        ls -al || true

    - name: Haskell versions
      run: |
        ghc --version
        cabal --version

    - name: Cabal update
      run: cabal update

    - name: Cabal Configure
      run: cabal configure --enable-tests --write-ghc-environment-files=always

    - name: Configure to use libsodium
      run: |
        cat >> cabal.project.local <<EOF
        package cardano-crypto-praos
          flags: -external-libsodium-vrf
        EOF

    - name: Build dry run
      run: |
        # The tests call out to msys2 commands. We generally do not want to mix toolchains, so
        # we are very deliberate about only adding msys64 to the path where absolutely necessary.
        ${{ (runner.os == 'Windows' && '$env:PATH=("C:\msys64\mingw64\bin;{0}" -f $env:PATH)') || '' }}
        cabal build all --dry-run --minimize-conflict-set

    # For users who fork cardano-node and want to define a writable cache, then can set up their own
    # S3 bucket then define in their forked repository settings the following secrets:
    #
    #   AWS_ACCESS_KEY_ID
    #   AWS_SECRET_ACCESS_KEY
    #   BINARY_CACHE_URI
    #   BINARY_CACHE_REGION
    - name: Cabal cache over S3
      uses: action-works/cabal-cache-s3@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        BINARY_CACHE_URI: ${{ vars.BINARY_CACHE_URI }}
        BINARY_CACHE_THREADS: ${{ vars.BINARY_CACHE_THREADS }}
        BINARY_CACHE_REGION: ${{ vars.BINARY_CACHE_REGION }}
      with:
        region: ${{ env.BINARY_CACHE_REGION }}
        dist-dir: dist-newstyle
        store-path: ${{ steps.setup-haskell.outputs.cabal-store }}
        threads: ${{ env.BINARY_CACHE_THREADS }}
        archive-uri: ${{ env.BINARY_CACHE_URI }}/${{ env.CABAL_CACHE_VERSION }}/${{ runner.os }}
        skip: "${{ env.BINARY_CACHE_URI == '' }}"

    # It's important to ensure that people who fork this repository can not only successfully build in
    # CI by default, but also have meaning cabal store caching.
    #
    # Because syncing with S3 requires credentials, we cannot rely on S3 for this. For this reason a
    # https fallback is used. The https server mirrors the content of the S3 bucket. The https cabal
    # store archive is read-only for security reasons.
    #
    # Users who fork this repository who want to have a writable cabal store archive are encouraged
    # to set up their own S3 bucket.
    - name: Cabal cache over HTTPS
      uses: action-works/cabal-cache-s3@v1
      with:
        dist-dir: dist-newstyle
        store-path: ${{ steps.setup-haskell.outputs.cabal-store }}
        threads: 16
        archive-uri: https://iohk.cache.haskellworks.io/${{ env.CABAL_CACHE_VERSION }}/${{ runner.os }}
        skip: "${{ env.BINARY_CACHE_URI != '' }}"
        enable-save: false

    - name: Build dependencies Linux
      if: matrix.os == 'ubuntu-latest'
      run: cabal build all --only-dependencies

    - name: Build dependencies macOS
      if: matrix.os == 'macos-latest'
      run: |
        cabal build all --only-dependencies

    - name: Build
      run: cabal build all

    - name: Set up database user (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: sudo -u postgres createuser --createdb --superuser runner

    - name: Set up database
      run: |
        cardano_db_sync_exe="$(cat dist-newstyle/cache/plan.json | jq -r '."install-plan"[] | select(."component-name" == "exe:cardano-db-sync") | ."bin-file"' | head)"

        echo "Executable found at: $cardano_db_sync_exe"
        chmod 600 config/pgpass-mainnet
        chmod 600 cardano-chain-gen/test/testfiles/pgpass-testing

        PGPASSFILE=config/pgpass-mainnet scripts/postgresql-setup.sh --createdb
        PGPASSFILE=cardano-chain-gen/test/testfiles/pgpass-testing scripts/postgresql-setup.sh --createdb

    - name: Run tests
      run: cabal test all -j1
