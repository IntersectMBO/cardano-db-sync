name: Haskell CI

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        ghc: ["8.6.5", "8.10.2"]
        os: [ubuntu-latest, macos-latest]

    steps:
    - uses: actions/checkout@v1

    - name: Select build directory
      run: |
        echo "CABAL_BUILDDIR=dist"              >> $GITHUB_ENV
        echo "PLAN_JSON=dist/cache/plan.json"   >> $GITHUB_ENV

    - name: Install pkgconfiglite
      if: matrix.os == 'windows-latest'
      run: choco install -y pkgconfiglite

    - name: Install libsodium
      if: matrix.os == 'windows-latest'
      run: |
        curl -Ls \
          --connect-timeout 5 \
          --max-time 10 \
          --retry 5 \
          --retry-delay 0 \
          --retry-max-time 40 \
          https://download.libsodium.org/libsodium/releases/libsodium-1.0.18-mingw.tar.gz -o libsodium-1.0.18-mingw.tar.gz
        tar zxvf libsodium-1.0.18-mingw.tar.gz

        sed -i "s|/d/a/1/s/|D:/a/cardano-node/cardano-node/|g" libsodium-win64/lib/pkgconfig/libsodium.pc

        export PKG_CONFIG_PATH="$(readlink -f libsodium-win64/lib/pkgconfig)"
        echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV

        export LIBSODIUM_PATH="$(readlink -f libsodium-win64/bin | sed 's|^/d|D:|g' | tr / '\\')"
        echo "LIBSODIUM_PATH=$LIBSODIUM_PATH"
        echo "$LIBSODIUM_PATH" >> $GITHUB_PATH

    - name: Install Postgres (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev libpq5 postgresql
        sudo pg_ctlcluster 13 main start

    - name: Install Postgres support (MacOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install postgres libpq
        brew services start postgresql
        sudo mkdir -p /var/run/postgresql/
        sudo ln -s /tmp/.s.PGSQL.5432 /var/run/postgresql/.s.PGSQL.5432

    - name: Check if postgres is running
      run: |
        sleep 20
        netstat -an
        ls -al /var/run/postgresql/.s.PGSQL.5432 || true
        ls -al || true

    - name: Install libsodium
      if: matrix.os == 'macos-latest'
      run: brew install libsodium

    - name: Select optimal cabal version
      run: |
        case "$OS" in
          Windows_NT)   echo "CABAL_VERSION=3.2.0.0"      >> $GITHUB_ENV;;
          *)            echo "CABAL_VERSION=3.4.0.0-rc4"  >> $GITHUB_ENV;;
        esac

    - uses: actions/setup-haskell@v1
      id: setup-haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ env.CABAL_VERSION }}


    - name: Install build environment
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get -y install libsodium23 libsodium-dev
        sudo apt-get -y install libsystemd0 libsystemd-dev
        sudo apt-get -y remove --purge software-properties-common
        sudo apt-get -y autoremove

    - name: Cabal update
      run: cabal update

    - name: Cabal Configure
      run: cabal configure --builddir="$CABAL_BUILDDIR" --write-ghc-environment-files=always

    - name: Configure to use libsodium
      run: |
        cat >> cabal.project.local <<EOF
        package cardano-crypto-praos
          flags: -external-libsodium-vrf
        EOF

    - uses: actions/cache@v2
      name: Cache cabal store
      with:
        path: ${{ steps.setup-haskell.outputs.cabal-store }}
        key: cache-cabal-store-${{ runner.os }}-${{ matrix.ghc }}-v1-${{ hashFiles(env.PLAN_JSON) }}-${{ github.sha }}
        restore-keys: |
          cache-cabal-store-${{ runner.os }}-${{ matrix.ghc }}-v1-${{ hashFiles(env.PLAN_JSON) }}-
          cache-cabal-store-${{ runner.os }}-${{ matrix.ghc }}-v1-

    - uses: actions/cache@v2
      name: Cache dist directory
      if: matrix.os != 'macos-latest'
      with:
        path: dist
        key: cache-dist-${{ runner.os }}-${{ matrix.ghc }}-v1-${{ hashFiles(env.PLAN_JSON) }}-${{ github.sha }}
        restore-keys: |
          cache-dist-${{ runner.os }}-${{ matrix.ghc }}-v1-${{ hashFiles(env.PLAN_JSON) }}-
          cache-dist-${{ runner.os }}-${{ matrix.ghc }}-v1-

    - name: Build dependencies
      run: cabal build all --builddir="$CABAL_BUILDDIR" --only-dependencies

    - name: Build
      run: cabal build all --builddir="$CABAL_BUILDDIR"

    - name: Set up database user (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: sudo -u postgres createuser --createdb --superuser runner

    - name: Set up database
      run: |
        cardano_db_sync_exe="$(cat $CABAL_BUILDDIR/cache/plan.json | jq -r '."install-plan"[] | select(."component-name" == "exe:cardano-db-sync") | ."bin-file"' | head)"

        echo "Executable found at: $cardano_db_sync_exe"
        chmod 600 config/pgpass-mainnet

        PGPASSFILE=config/pgpass-mainnet scripts/postgresql-setup.sh --createdb

    - name: Run tests
      run: cabal test --builddir="$CABAL_BUILDDIR" all -j1

